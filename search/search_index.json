{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"The ReCrystals (Repair Crystal) Program","text":"<p>Authors: Dr. Geoffrey Weal<sup>*,\u2020</sup>, Dr. Chayanit Wechwithayakhlung<sup>\u2020</sup>, Dr. Josh Sutton<sup>*</sup>, Dr. Daniel Packwood<sup>\u2020</sup>, Dr. Paul Hume<sup>*</sup>, Prof. Justin Hodgkiss<sup>*</sup></p> <p><sup>*</sup> Victoria University of Wellington, Wellington, New Zealand; The MacDiarmid Institute for Advanced Materials and Nanotechnology, Wellington, New Zealand. </p> <p><sup>\u2020</sup> Institute for Integrated Cell-Material Sciences (iCeMS), Kyoto University, Kyoto, Japan.</p> <p>Group pages: https://people.wgtn.ac.nz/paul.hume/grants, https://www.packwood.icems.kyoto-u.ac.jp/, https://people.wgtn.ac.nz/justin.hodgkiss/grants</p>"},{"location":"index.html#what-is-the-recrystals-repair-crystal-program","title":"What is the ReCrystals (Repair Crystal) Program","text":"<p>The ReCrystals (Repair Crystal) program is designed to allow you to make changes to the molecules in your crystal. This is helpful in cases where the crystals have structural problems. These include:</p> <ul> <li>Extra or missing hydrogens </li> <li>Wonky hydrogens (sp<sup>2</sup> hydrogens on conjugated molecules in sp<sup>3</sup> positions, methyl hydrogens slightly off)</li> <li>Wonky atoms (common with saturated and unsaturated aliphatic side-chains)</li> </ul> <p>Note: This program is not designed to allow you to fundamentally change the crystal structure. This program is only designed to make slight modifications, such as </p> <ul> <li>removing wonky aliphatic side-chains that don't matter for performing charge-transfer calculations, </li> <li>adding missing hydrogens to molecules in the crystal, </li> <li>and other slightly modifications</li> </ul>"},{"location":"index.html#installation","title":"Installation","text":"<p>It is recommended to read the installation page before using the ReCrystals program. See Installation: Setting Up ReCrystals and Pre-Requisites Packages for more information. Note that you can install ReCrystals through <code>pip3</code> and <code>conda</code>. </p>"},{"location":"index.html#guide-to-using-recrystals","title":"Guide To Using ReCrystals","text":"<p>After you have installed ReCrystals, see How To Use The ReCrystals Program to learn about how to use this program. </p>"},{"location":"index.html#the-grand-scheme","title":"The Grand Scheme","text":"<p>The ReCrystals program is used as part of a grand scheme for calculating the excited-state electronic properties of molecules in a crystal. This includes simulations of exciton and charge diffusion through crystal structures, in particular for organic molecules (but not limited to them). This scheme is shown below, along with where the ReCrystals program is used in this scheme. </p> <p> </p>"},{"location":"Installation.html","title":"Installation","text":"<p>In this article, we will look at how to install the ReCrystals program and all requisites required for this program.</p>"},{"location":"Installation.html#pre-requisites","title":"Pre-requisites","text":""},{"location":"Installation.html#python-3-and-pip3","title":"Python 3 and <code>pip3</code>","text":"<p>This program is designed to work with Python 3. This program can only be used with Python 3.7. This is because the CSD Python API can only run using Python 3.7. </p> <p>To find out if you have Python 3 on your computer and what version you have, type into the terminal</p> <pre><code>python --version\n</code></pre> <p>If you have Python 3 on your computer, you will get the version of python you have on your computer. E.g.</p> <pre><code>user@computer_name path % python --version\nPython 3.7.9\n</code></pre> <p>If you have Python 3, you may have <code>pip</code> installed on your computer as well. <code>pip</code> is a python package installation tool that is recommended by Python for installing Python packages. To see if you have <code>pip</code> installed, type into the terminal</p> <p><pre><code>pip list\n</code></pre> If you get back a list of python packages install on your computer, you have <code>pip</code> installed. E.g.</p> <pre><code>user@computer_name Documentation % pip3 list\nPackage                       Version\n----------------------------- ---------\nalabaster                     0.7.12\nasap3                         3.11.10\nase                           3.20.1\nBabel                         2.8.0\ncertifi                       2020.6.20\nchardet                       3.0.4\nclick                         7.1.2\ncycler                        0.10.0\ndocutils                      0.16\nFlask                         1.1.2\nidna                          2.10\nimagesize                     1.2.0\nitsdangerous                  1.1.0\nJinja2                        2.11.2\nkiwisolver                    1.2.0\nMarkupSafe                    1.1.1\nmatplotlib                    3.3.1\nnumpy                         1.19.1\npackaging                     20.4\nPillow                        7.2.0\npip                           20.2.4\nPygments                      2.7.1\npyparsing                     2.4.7\npython-dateutil               2.8.1\npytz                          2020.1\nrequests                      2.24.0\nscipy                         1.5.2\nsetuptools                    41.2.0\nsix                           1.15.0\nsnowballstemmer               2.0.0\nSphinx                        3.2.1\nsphinx-pyreverse              0.0.13\nsphinx-rtd-theme              0.5.0\nsphinx-tabs                   1.3.0\nsphinxcontrib-applehelp       1.0.2\nsphinxcontrib-devhelp         1.0.2\nsphinxcontrib-htmlhelp        1.0.3\nsphinxcontrib-jsmath          1.0.1\nsphinxcontrib-plantuml        0.18.1\nsphinxcontrib-qthelp          1.0.3\nsphinxcontrib-serializinghtml 1.1.4\nsphinxcontrib-websupport      1.2.4\nurllib3                       1.25.10\nWerkzeug                      1.0.1\nwheel                         0.33.1\nxlrd                          1.2.0\n</code></pre> <p>If you do not see this, you probably do not have <code>pip</code> installed on your computer. If this is the case, check out PIP Installation. </p> <p>Note</p> <p>In most cases, <code>pip</code> and <code>pip3</code> are synonymous for the Python Installation Package for Python 3. However in some cases, <code>pip</code> will be directed to the Python Installation Package for Python 2 rather than Python 3. To check this, run in the terminal:</p> <pre><code>pip --version\n</code></pre> <p>If the output indicates you this Python Installation Package is for Python 2 and not Python 3, only install packages using the <code>pip3</code> name. </p> <p>For the rest of this documentation, <code>pip</code> will be used, however if your computer's <code>pip</code>  refers to Python 2 and not Python 3, use <code>pip3</code>  instead of <code>pip</code>. </p>"},{"location":"Installation.html#atomic-simulation-environment-ase","title":"Atomic Simulation Environment (ASE)","text":"<p>The ReCrystals program uses the Atomic Simulation Environment (ASE) to read in the crystal data from various file format, to process the crystals, and to save the the crystals to disk. Read more about ASE here. </p> <p>The installation of ASE can be found on the ASE installation page, however from experience if you are using ASE for the first time, it is best to install ASE using <code>pip</code>, the package manager that is an extension of python to keep all your program easily managed and easy to import into your python. </p> <p>To install ASE using <code>pip</code>, perform the following in your terminal.</p> <pre><code>pip install --upgrade --user ase\n</code></pre> <p>Installing using <code>pip</code> ensures that ASE is being installed to be used by Python 3, and not Python 2. Installing ASE like this will also install all the requisite program needed for ASE. This installation includes the use of features such as viewing the xyz files of structure and looking at ase databases through a website. These should be already assessible, which you can test by entering into the terminal:</p> <pre><code>ase gui\n</code></pre> <p>This should show a GUI with nothing in it, as shown below.</p> This is a blank ase gui screen that you would see if enter ase gui into the terminal. <p>However, in the case that this does not work, we need to manually add a path to your <code>~/.bashrc</code> so you can use the ASE features externally outside python. Do the following; first enter the following into the terminal:</p> <pre><code>pip show ase\n</code></pre> <p>This will give a bunch of information, including the location of ase on your computer. For example, when I do this I get:</p> <pre><code>user@computer_name docs % pip show ase\nName: ase\nVersion: 3.20.1\nSummary: Atomic Simulation Environment\nHome-page: https://wiki.fysik.dtu.dk/ase\nAuthor: None\nAuthor-email: None\nLicense: LGPLv2.1+\nLocation: /Users/geoffreyweal/Library/Python/3.7/lib/python/site-packages\nRequires: matplotlib, scipy, numpy\nRequired-by: \n</code></pre> <p>Copy the <code>Location</code> line. If we remove the <code>lib/python/site-packages</code> bit and replace it with <code>bin</code>, this gives us the location of useful ASE programs. The example below is for Python 3.7. </p> <pre><code>/Users/geoffreyweal/Library/Python/3.7/bin\n</code></pre> <p>Next, add this to your <code>~/.bashrc</code> file as below:</p> <pre><code>############################################################\n# For ASE\nexport PATH=/Users/geoffreyweal/Library/Python/3.7/bin:$PATH\n############################################################\n</code></pre> <p>Write <code>source ~/.bashrc</code> in the terminal and press enter. Once you have done this, try to run <code>ase gui</code> in the terminal. This will hopefully show the ase gui and allow you to access the useful ASE programs through the terminal. </p>"},{"location":"Installation.html#networkx","title":"Networkx","text":"<p><code>Networkx</code> is a python program that is used in the ReCrystals program to describe the bonding structure between atoms in the crystal structure. The easiest way to install <code>Networkx</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user networkx\n</code></pre>"},{"location":"Installation.html#packaging","title":"Packaging","text":"<p>The <code>packaging</code> program is also used in this program to check the versions of ASE that you are using for compatibility issues. The easiest way to install <code>packaging</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user packaging\n</code></pre>"},{"location":"Installation.html#sumelf","title":"SUMELF","text":"<p>The <code>SUMELF</code> program contains several methods that are used by multiple programs in the grand scheme to obtain exciton and charge diffusion in crystals. The easiest way to install <code>SUMELF</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user SUMELF\n</code></pre> <p>However, there are other ways to install the <code>SUMELF</code> program. See the SUMELF Installation webpage for more information. </p>"},{"location":"Installation.html#tqdm","title":"TQDM","text":"<p>The <code>tqdm</code> program is used by this program to provide progress bars that are useful for easily monitoring progress during this program. The easiest way to install <code>tqdm</code> is though <code>pip</code>. Type the following into the terminal:</p> <pre><code>pip3 install --upgrade --user tqdm\n</code></pre>"},{"location":"Installation.html#setting-up-the-recrystals-program","title":"Setting up the ReCrystals Program","text":"<p>There are three ways to install ReCrystals on your system. These ways are described below:</p>"},{"location":"Installation.html#install-recrystals-through-pip3","title":"Install ReCrystals through <code>pip3</code>","text":"<p>To install the ReCrystals program using <code>pip3</code>, perform the following in your terminal:</p> <pre><code>pip3 install --upgrade --user git+https://github.com/geoffreyweal/ReCrystals.git\n</code></pre> <p>To install all related programs at the same time, performing the following in your terminal: </p> <pre><code>pip3 install --upgrade --user git+https://github.com/geoffreyweal/SUMELF.git git+https://github.com/geoffreyweal/ACSD.git git+https://github.com/geoffreyweal/ReCrystals.git git+https://github.com/geoffreyweal/RSGC.git git+https://github.com/geoffreyweal/ReJig.git git+https://github.com/geoffreyweal/ECCP.git git+https://github.com/geoffreyweal/EKMC.git git+https://github.com/geoffreyweal/SORE.git\n</code></pre>"},{"location":"Installation.html#install-recrystals-through-conda","title":"Install ReCrystals through <code>conda</code>","text":"<p>You can install the ReCrystals program on <code>conda</code> through <code>pip</code>. Click here to see more information about installing ReCrystals through <code>conda</code>.</p>"},{"location":"Installation.html#manual-installation","title":"Manual installation","text":"<p>First, download the ReCrystals program to your computer. You can do this by cloning a version of this from Github, or obtaining a version of the program from the authors. If you are obtaining this program via Github, you want to <code>cd</code> to the directory that you want to place this program in on the terminal, and then clone the program from Github through the terminal as well: </p> <pre><code>cd PATH/TO/WHERE_YOU_WANT_TO_PLACE_ReCrystals_ON_YOUR_COMPUTER\ngit clone https://github.com/geoffreyweal/ReCrystals\n</code></pre> <p>Second, you need to change permissions to use this program by using <code>chmod</code>. In the terminal write:</p> <pre><code>chmod -R 777 ReCrystals\n</code></pre> <p>Third, you will want to add a python path for the ASCD program to the <code>~/.bashrc</code> to indicate its location. You can do this by entering the following into the terminal and clicking enter:</p> <pre><code>echo '\n###################################\n# Used for the ReCrystals Program\nexport PATH_TO_ReCrystals=\"'$PWD'/ReCrystals\" \nexport PYTHONPATH=\"$PATH_TO_ReCrystals\":$PYTHONPATH\nexport PATH=\"$PATH_TO_ReCrystals\"/bin:$PATH\n###################################\n' &gt;&gt; ~/.bashrc\n</code></pre> <p>You can check that this has been entered into your <code>~/.bashrc</code> file by typing <code>vim ~/.bashrc</code> into the terminal, and scrolling down to the bottom of the terminal. </p> <p>Tip</p> <p>Make sure that the path given to <code>PATH_TO_ReCrystals</code> is the correct path to the ReCrystals folder. </p> <p>Finally, source your <code>~/.bashrc</code> file by typing the following into the terminal and pressing the enter button:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Once you have run <code>source ~/.bashrc</code>, the ReCrystals program should be all ready to go! You can check this by typing the following into the terminal:</p> <pre><code>which ReCrystals\n</code></pre> <p>This should give you the path to the ReCrystals program. If the terminal tells you it can not find this program, check that the path you gave for <code>PATH_TO_ReCrystals</code> is the correct path to the ReCrystals folder. </p>"},{"location":"Installation.html#summary-of-bashrc-input","title":"Summary of <code>~/.bashrc</code> input","text":"<p>You want to have the following in your <code>~/.bashrc</code>:</p> <pre><code>###################################\n# Used for the ReCrystals Program\nexport PATH_TO_ReCrystals=\"&lt;Path_to_ReCrystals&gt;\" \nexport PYTHONPATH=\"$PATH_TO_ReCrystals\":$PYTHONPATH\nexport PATH=\"$PATH_TO_ReCrystals\"/bin:$PATH\n###################################\n</code></pre> <p>where <code>\"&lt;Path_to_ReCrystals&gt;\"</code> is the directory path that you place the ReCrystals program. You can find this by changing directory (<code>cd</code>) into the ReCrystals folder and typing <code>pwd</code> into the terminal. This will give you the full path to the ReCrystals program. </p>"},{"location":"Troubleshooting.html","title":"Issues and Troubleshooting","text":"<p>The following page includes some of the issues I have faced in using the ReCrystals program and some of the tips and troubleshooting advice for overcoming various difficulties. </p> <p>None so far</p>"},{"location":"Troubleshooting.html#other-issues","title":"Other Issues","text":"<p>This program is definitely a \"work in progress\". I have made it as easy to use as possible, but there are always oversights to program development and some parts of it may not be as easy to use as it could be. </p> <p>If you have any issues with the program or you think there would be better/easier ways to use and implement things in the ReCrystals program, write a message on the ReCrystals Github Issues page. Feedback is very much welcome!</p>"},{"location":"Using_The_ReCrystals_Program.html","title":"Using the ReCrystals Program","text":"<p>This page will describe the general steps of how to use this program, including how to modify the crystals you would like to modify. </p> <p>Example</p> <p>You can find examples for running the ReCrystals program in the <code>Examples</code> folder here.</p>"},{"location":"Using_The_ReCrystals_Program.html#preliminary-step-check-the-quality-of-your-crystal-structure-get_molecules","title":"Preliminary Step: Check the Quality of your Crystal Structure (<code>get_molecules</code>)","text":"<p>To begin, we will want to check what our crystal structure looks like. One of the easiest ways to do this is to look at the molecules in the crystals individually. It is possible to obtain the xyz files of each molecule in the crystal individually using the <code>get_molecules</code> module in the <code>SUMELF</code> program to separate the crystal into separate molecules. </p> <p>To use the <code>get_molecules</code> module, type the following into your terminal:</p> <pre><code># First, change directory into the directory contain the folder with your crystal files\ncd path_to_crystal_database\n\n# Second, run the get_molecules program:\nSUMELF get_molecules crystal_database\n</code></pre> <p>This will separate the crystal into its individual molecules, and save them as individual <code>xyz</code> file in folder called crystal_database_molecules. You can view these molecules using your favourite GUI viewer, mine is <code>ase gui</code> (click here for more about <code>ase gui</code>).</p> <p>Info</p> <p>You can also use Mercury (a CCDC program) to view the crystal. However, you will need to use the <code>get_molecules</code> to get the names of the molecules and the atom indices to make modifications to for the  <code>Repair_Crystals</code> module in the ReCrystals program</p>"},{"location":"Using_The_ReCrystals_Program.html#main-step-repair-the-crystal","title":"Main Step: Repair the Crystal","text":"<p>The <code>Repair_Crystals</code> module allows you to repair the molecules in a crystal before recombining them to form the crystal using a python script. Below is an example of a python script called <code>repair_crystals.py</code> that contains the instructions given by the user to modify and repair the crystal.  </p> repair_crystals.py<pre><code>from ReCrystals import Repair_Crystals\n\nrepair_crystals_instructions = {}\n\nrepair_crystals_instructions['AFUZIN'] = [{'action': 'remove_molecules', 'molecules': 3}]\nrepair_crystals_instructions['AJUCAK'] = [{'action': 'remove_molecules', 'molecules': 6}]\n\nrepair_crystals_instructions['ARUJOP'] = []\nrepair_crystals_instructions['ARUJOP'].append({'action': 'remove_atoms', 'molecule': 1, 'atoms': [98, 82, 85, 76, 77, 88, 89, 101, 95, 87, 90, 86, 81, 99]})\nrepair_crystals_instructions['ARUJOP'].append({'action': 'remove_atoms', 'molecule': 2, 'atoms': [83, 91, 84, 70, 75, 96, 98, 85, 80, 94, 97]})\nrepair_crystals_instructions['ARUJOP'].append({'action': 'remove_atoms', 'molecule': 3, 'atoms': [89, 88, 70, 84, 96, 87, 92, 94, 83]})\nrepair_crystals_instructions['ARUJOP'].append({'action': 'remove_atoms', 'molecule': 4, 'atoms': [90, 92, 85, 78, 91, 95, 88, 89]})\nrepair_crystals_instructions['ARUJOP'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': [92, 65, 58, 100], 'number_of_hydrogens_to_add': 3})\nrepair_crystals_instructions['ARUJOP'].append({'action': 'add_hydrogens', 'molecule': 2, 'atoms': [35, 59, 92, 95], 'number_of_hydrogens_to_add': 3})\nrepair_crystals_instructions['ARUJOP'].append({'action': 'add_hydrogens', 'molecule': 3, 'atoms': [55, 65, 95, 93], 'number_of_hydrogens_to_add': 3})\nrepair_crystals_instructions['ARUJOP'].append({'action': 'add_hydrogens', 'molecule': 4, 'atoms': [48, 57, 93, 94], 'number_of_hydrogens_to_add': 3})\n\nrepair_crystals_instructions['ANCTNB'] = []\nrepair_crystals_instructions['ANCTNB'].append({'action': 'move_atom_to', 'molecule': 2, 'atoms': {12: (-3.7497, 0.0377, 0.5917), 4:  (-0.7413, 0.0377, 4.2583)}})\n\nbond_info = {'bond_type': 'Single', 'involved_in_no_of_rings': 0, 'is_conjugated': False, 'is_cyclic': False, 'bond_type_from_sybyl_type': 1}\nrepair_crystals_instructions['CAMKEK'] = []\nrepair_crystals_instructions['CAMKEK'].append({'action': 'remove_atoms',   'molecule': 1, 'atoms': [12, 13, 14, 15, 11]+[23, 24]+[31, 30, 29], 'add_edges_after_removing_atoms': [(26, 27, bond_info)]})\nrepair_crystals_instructions['CAMKEK'].append({'action': 'change_element', 'molecule': 1, 'atoms': [18, 25, 26], 'updated_elements': ['N', 'C', 'C']})\nrepair_crystals_instructions['CAMKEK'].append({'action': 'add_hydrogens',  'molecule': 1, 'atoms': 28, 'number_of_hydrogens_to_add': 3})\n\nrepair_crystals_instructions['EBOZII'] = []\nrepair_crystals_instructions['EBOZII'].append({'action': 'change_hybridisation', 'molecule': 1, 'atoms': [97,33], 'updated_hybridisations': 'sp3'})\nrepair_crystals_instructions['EBOZII'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': {53:2,49:2,33:2,52:3, 97:2,113:2,117:2,116:3, 109:3,115:3, 45:3,51:3}, 'remove_existing_hydrogens': True})\nrepair_crystals_instructions['EBOZII'].append({'action': 'add_hydrogens', 'molecule': 2, 'atoms': [107,108,105,106]+[51,50,53,52], 'number_of_hydrogens_to_add': 3})\n\nrepair_crystals_instructions['EGOFEN'] = []\nrepair_crystals_instructions['EGOFEN'].append({'action': 'change_charges', 'molecule': 1, 'atoms': [36,12], 'updated_charges': 0})\nrepair_crystals_instructions['EGOFEN'].append({'action': 'add_hydrogens',  'molecule': 1, 'atoms': [36,12], 'number_of_hydrogens_to_add': 2, 'remove_existing_hydrogens': True})\n\nrepair_crystals_instructions['SAZQIX'] = []\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_ethyls',    'molecule': 1, 'atoms': [69, 70], 'number_of_ethyls_to_add': 1})\n#repair_crystals_instructions['SAZQIX'].append({'action': 'add_ethyls',    'molecule': 1, 'atoms': [69, 70], 'number_of_ethyls_to_add': [1, 1]}) # Another way to write the above\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': {71:3,68:3}})\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_ethyls',    'molecule': 2, 'atoms': {69:1,68:1}})\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_hydrogens', 'molecule': 2, 'atoms': {50:3,70:3}})\n\nrepair_crystals_instructions['SAZQOD'] = []\nrepair_crystals_instructions['SAZQOD'].append({'action': 'add_methyls',   'molecule': 1, 'atoms': {4:1,70:1}})\nrepair_crystals_instructions['SAZQOD'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': {71:3,68:3}})\n\n# ===================================================================================================================\n\nRepair_Crystals(repair_crystals_instructions)\n\n# ===================================================================================================================\n</code></pre> <p>Here, a dictionary called <code>repair_crystals_instructions</code> contains the names of the crystals you want to repair from the <code>ACSD</code> or <code>xyzCrystal</code> programs, along with a list of all the instructions you would like to perform upon the crystal. </p> <p>An instruction is itself a dictionary the contains an action, along with options for that action. </p> <pre><code>instruction = {'action': 'action here', ...}\n</code></pre> <p>The actions available are:</p> <ul> <li><code>remove_edges</code>: Remove edges that connect atoms together in the crystal. This is used if bonds were given between two atoms that should not exist. </li> <li><code>add_edges</code>: Add edges to connect atoms together in the crystal. This is used if bonds were not given between atoms in the crystal file.</li> <li> <p><code>update_edges</code>: Update an edges that already exists in the crystal. </p> </li> <li> <p><code>remove_molecules</code>: Remove selected molecules from the crystal.</p> </li> <li> <p><code>remove_atoms</code>: Remove atoms from a molecule in a crystal.</p> </li> <li> <p><code>move_atom_to</code>: Move an atom in a molecule to a new position.</p> </li> <li><code>change_element</code>: Change the element of an atom in a molecule.</li> <li><code>change_hybridisation</code>: Change the hybridisation of an atom in a molecule.</li> <li> <p><code>change_charges</code>: Change the charge of an atom in a molecule.</p> </li> <li> <p><code>add_ethyls</code>: Add ethyl groups to a molecule.</p> </li> <li><code>add_methyls</code>: Add methyl groups to a molecule.</li> <li><code>add_hydrogens</code>: Add hydrogens to a molecule.</li> </ul> <p>The following describe the settings for each instruction action:</p>"},{"location":"Using_The_ReCrystals_Program.html#action-remove_edges","title":"Action: <code>remove_edges</code>","text":"<p>This action will remove edges from a molecule from the crystal. This is required if the original crystal structure contains incorrect bonds in a molecule. The parameters for this action are:</p> <ul> <li><code>molecule</code> (<code>int</code>) [Required]: This is the molecule you want to add edges to in the crystal. The names of the molecules are given by the <code>SUMELF get_molecules</code> program. </li> <li><code>edges</code> (<code>list</code> of tuples) [Required]: This is the list of edges you want to remove from the molecule of interest. </li> </ul> Example of the remove_edges action<pre><code>repair_crystals_instructions['CAMKEK'] = [{'action': 'remove_edges', 'molecule': 1, 'edges': [(26, 27)]}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-add_edges","title":"Action: <code>add_edges</code>","text":"<p>This action will add edges to a molecule from the crystal. This is required if the original crystal structure did not indicate there was a bond between atoms in the molecule. The parameters for this action are:</p> <ul> <li><code>molecule</code> (<code>int</code>) [Required]: This is the molecule you want to add edges to in the crystal. The names of the molecules are given by the <code>SUMELF get_molecules</code> program. </li> <li><code>edges</code> (<code>list</code> of tuples) [Required]: This is the list of edges to add to the molecule of interest. This is given as a tuple containing the two indices of the atoms you want to connnect, along with the bond information (<code>bond_info</code>). If the bond information is not given, this will not be supplied to the edge. This may cause issues by not entering the <code>bond_info</code>, so it is recommended to do so. </li> </ul> Example of the add_edges action<pre><code>bond_info = {'bond_type': 'Single', 'involved_in_no_of_rings': 0, 'is_conjugated': False, 'is_cyclic': False, 'bond_type_from_sybyl_type': 1}\nrepair_crystals_instructions['CAMKEK'] = [{'action': 'add_edges', 'molecule': 1, 'edges': [(26, 27, bond_info)]}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-update_edges","title":"Action: <code>update_edges</code>","text":"<p>This action will update the bond information (<code>bond_info</code>) of the edges of interest in the molecule of interest. </p> <p>Note</p> <p>The edges much exist in the molecule prior to updating them. If these are new edges, use the <code>add_edges</code> action. </p> <p>The parameters for this action are:</p> <ul> <li><code>molecule</code> (<code>int</code>) [Required]: This is the molecule you want to update the edges to in the crystal. The names of the molecules are given by the <code>SUMELF get_molecules</code> program. </li> <li><code>edges</code> (<code>list</code> of tuples) [Required]: This is the list of edges you want to update. This is given as a tuple containing the two indices of the atoms you want to connnect, along with the bond information (<code>bond_info</code>). If the bond information is not given, this will not be supplied to the edge. This may cause issues by not entering the <code>bond_info</code>, so it is recommended to do so. </li> </ul> Example of the add_edges action<pre><code>bond_info = {'bond_type': 'Single', 'involved_in_no_of_rings': 0, 'is_conjugated': False, 'is_cyclic': False, 'bond_type_from_sybyl_type': 1}\nrepair_crystals_instructions['CAMKEK'] = [{'action': 'update_edges', 'molecule': 1, 'edges': [(26, 27, bond_info)]}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-remove_molecules","title":"Action: <code>remove_molecules</code>","text":"<p>This action will remove molecules from the crystal. The parameters for this action are:</p> <ul> <li><code>molecules</code> (int or list) [Required]: These are the names of the molecule you want to remove from the crystal. The names of the molecules are given by the <code>SUMELF get_molecules</code> program. </li> </ul> Example of the remove_molecules action<pre><code>repair_crystals_instructions['AFUZIN'] = [{'action': 'remove_molecules', 'molecules': 3}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-remove_atoms","title":"Action: <code>remove_atoms</code>","text":"<p>This action will remove atoms in a molecule from the crystal. The parameters for this action are:</p> <ul> <li><code>molecule</code> (<code>int</code>) [Required]: This is the molecule you want to remove atoms from in the crystal. The names of the molecules are given by the <code>SUMELF get_molecules</code> program. </li> <li><code>atoms</code> (<code>int</code> or <code>list</code>) [Required]: This is the list of atom indices you want to remove from the molecule of interest. This can be given as an <code>int</code> or a <code>list</code> of indices.</li> <li><code>remove_attached_hydrogens</code> (<code>bool.</code>) [Optional]: If this is set to <code>True</code>, any hydrogens that are attached to atoms you want to remove will also be removed. If <code>False</code>, attached hydrogen will not be removed automatically. Default: <code>True</code>.</li> <li><code>create_new_molecules</code> (<code>bool.</code>) [Optional]: This indicates if you are happy if two molecules are created when you split a molecule into two or more pieces by removing atoms from the molecule. </li> </ul> Example of the remove_atoms action<pre><code>repair_crystals_instructions['ARUJOP'] = [{'action': 'remove_atoms', 'molecule': 1, 'atoms': [98, 82, 85, 76, 77, 88, 89, 101, 95, 87, 90, 86, 81, 99]}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-move_atom_to","title":"Action: <code>move_atom_to</code>","text":"<p>This action will move atoms in a molecule. The parameters for this action are:</p> <ul> <li><code>molecule</code> (<code>int</code>) [Required]: This is the molecule you want to move atoms within. The names of the molecules are given by the <code>SUMELF get_molecules</code> program. </li> <li><code>atoms</code> (<code>dict.</code>) [Required]: This dictionary contains the atom indices you want to move, along with the positions you want to move the atoms to. </li> </ul> Example of the move_atom_to action<pre><code>repair_crystals_instructions['ANCTNB'] = [{'action': 'move_atom_to', 'molecule': 2, 'atoms': {12: (-3.7497, 0.0377, 0.5917), 4:  (-0.7413, 0.0377, 4.2583)}}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-change_element","title":"Action: <code>change_element</code>","text":"<p>This action will change the elements of the atoms in a molecule. The parameters for this action are:</p> <ul> <li><code>atoms</code> (<code>int</code>, <code>list</code>, or <code>dict.</code>) [Required]: This is the list of atom indices you want to change the element of in the molecule of interest. This can be given as an <code>int</code> or a <code>list</code> of indices. If given as a <code>dict</code>, the key is the atom index you want to change, and the value is the symbol of the element you want to change the atoms to.</li> <li><code>updated_elements</code> (<code>str.</code>, or <code>list</code> of <code>str.</code>) [Optional]: These are the elements you want to change the atoms in the <code>atoms</code> variable to. Only give this if your <code>atoms</code> variable was an <code>int</code> or <code>list</code>. If only one element is given here, all the atoms in the <code>atoms</code> variable will be changed to this element.</li> </ul> Example of the change_element action. All these are valid.<pre><code>repair_crystals_instructions['CAMKEK'] = [{'action': 'change_element', 'molecule': 1, 'atoms': [25, 26], 'updated_elements': 'C'}]\nrepair_crystals_instructions['CAMKEK'] = [{'action': 'change_element', 'molecule': 1, 'atoms': [18, 25, 26], 'updated_elements': ['N', 'C', 'C']}]\nrepair_crystals_instructions['UNIHOP'] = [{'action': 'change_element', 'molecule': 1, 'atoms': {48: 'C'}}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-change_hybridisation","title":"Action: <code>change_hybridisation</code>","text":"<p>This action will change the hybridisations of the atoms in a molecule. The parameters for this action are:</p> <ul> <li><code>atoms</code> (<code>int</code>, <code>list</code>, or <code>dict.</code>) [Required]: This is the list of atom indices you want to change the hybridisation of in the molecule of interest. This can be given as an <code>int</code> or a <code>list</code> of indices. If given as a <code>dict</code>, the key is the atom index you want to change, and the value is the hybridisation of the atom you want to change the atoms to.</li> <li><code>updated_hybridisations</code> (<code>str.</code>, or <code>list</code> of <code>str.</code>) [Optional]: These are the hybridisations you want to change the atoms in the <code>atoms</code> variable to. Only give this if your <code>atoms</code> variable was an <code>int</code> or <code>list</code>. If only one element is given here, all the atoms in the <code>atoms</code> variable will be changed to this element.</li> </ul> Example of the change_hybridisation action. All these are valid.<pre><code>repair_crystals_instructions['JITLII'] = [{'action': 'change_hybridisation', 'molecule': 1, 'atoms': [2,4,6,11,12,13,15,16,17,72,71,70,68,67,66,61,59,57], 'updated_hybridisations': 'sp2'}]\nrepair_crystals_instructions['EBOZEE'] = [{'action': 'change_hybridisation', 'molecule': 2, 'atoms': [98,30], 'updated_hybridisations': ['sp2', 'sp2']}]\nrepair_crystals_instructions['GUXMIW'] = [{'action': 'change_hybridisation', 'molecule': 1, 'atoms': {10: 'sp2',9: 'sp2'}}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-change_charges","title":"Action: <code>change_charges</code>","text":"<p>This action will change the charge of the atoms in a molecule. The parameters for this action are:</p> <ul> <li><code>atoms</code> (<code>int</code>, <code>list</code>, or <code>dict.</code>) [Required]: This is the list of atom indices you want to change the charge of in the molecule of interest. This can be given as an <code>int</code> or a <code>list</code> of indices. If given as a <code>dict</code>, the key is the atom index you want to change, and the value is the charge of the atom you want to change the atoms to.</li> <li><code>updated_charges</code> (<code>int.</code>, or <code>list</code> of <code>int.</code>) [Optional]: These are the charges you want to change the atoms in the <code>atoms</code> variable to. Only give this if your <code>atoms</code> variable was an <code>int</code> or <code>list</code>. If only one element is given here, all the atoms in the <code>atoms</code> variable will be changed to this element.</li> </ul> Example of the change_charges action. All these are valid.<pre><code>repair_crystals_instructions['EGOFEN'] = [{'action': 'change_charges', 'molecule': 1, 'atoms': [36,12], 'updated_charges': 0}]\nrepair_crystals_instructions['EGOFEN'] = [{'action': 'change_charges', 'molecule': 1, 'atoms': [36,12], 'updated_charges': [0, 0]}]\nrepair_crystals_instructions['EGOFEN'] = [{'action': 'change_charges', 'molecule': 1, 'atoms': {36: 0, 12: 0}}]\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-add_ethyls","title":"Action: <code>add_ethyls</code>","text":"<p>This action will attach ethyl groups to atoms in a molecule. The parameters for this action are:</p> <ul> <li><code>atoms</code> (<code>int</code>, <code>list</code>, or <code>dict.</code>) [Required]: This is the list of atom indices you want to add ethyl groups to in the molecule of interest. This can be given as an <code>int</code> or a <code>list</code> of indices. If given as a <code>dict</code>, the key is the atom index you want to change, and the value is the charge of the atom you want to change the atoms to.</li> <li><code>number_of_ethyls_to_add</code> (<code>int.</code>, or <code>list</code> of <code>int.</code>) [Optional]: These are the number of ethyl groups you want to attached the atoms in the <code>atoms</code> variable to. Only give this if your <code>atoms</code> variable was an <code>int</code> or <code>list</code>. If only one element is given here, all the atoms in the <code>atoms</code> variable will be changed to this element.</li> </ul> Example of the add_ethyls action. All these are valid.<pre><code>repair_crystals_instructions['SAZQIX'] = []\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_ethyls',    'molecule': 1, 'atoms': [69, 70], 'number_of_ethyls_to_add': 1})\n#repair_crystals_instructions['SAZQIX'].append({'action': 'add_ethyls',    'molecule': 1, 'atoms': [69, 70], 'number_of_ethyls_to_add': [1, 1]}) # Another way to write the above\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': {71:3,68:3}})\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_ethyls',    'molecule': 2, 'atoms': {69:1,68:1}})\nrepair_crystals_instructions['SAZQIX'].append({'action': 'add_hydrogens', 'molecule': 2, 'atoms': {50:3,70:3}})\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-add_methyls","title":"Action: <code>add_methyls</code>","text":"<p>This action will attach methyl groups to atoms in a molecule. This method works in the same way as the <code>add_ethyls</code> action. The parameters for this action are:</p> <ul> <li><code>atoms</code> (<code>int</code>, <code>list</code>, or <code>dict.</code>) [Required]: This is the list of atom indices you want to add methyl groups to in the molecule of interest. This can be given as an <code>int</code> or a <code>list</code> of indices. If given as a <code>dict</code>, the key is the atom index you want to change, and the value is the charge of the atom you want to change the atoms to.</li> <li><code>number_of_methyls_to_add</code> (<code>int.</code>, or <code>list</code> of <code>int.</code>) [Optional]: These are the number of methyl groups you want to attached the atoms in the <code>atoms</code> variable to. Only give this if your <code>atoms</code> variable was an <code>int</code> or <code>list</code>. If only one element is given here, all the atoms in the <code>atoms</code> variable will be changed to this element.</li> </ul> Example of the add_methyls action. All these are valid.<pre><code>repair_crystals_instructions['SAZQOD'] = []\nrepair_crystals_instructions['SAZQOD'].append({'action': 'add_methyls', 'molecule': 1, 'atoms': {4:1, 70:1}})\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#action-add_hydrogens","title":"Action: <code>add_hydrogens</code>","text":"<p>This action will attach hydrogens to atoms in a molecule. The parameters for this action are:</p> <ul> <li><code>atoms</code> (<code>int</code>, <code>list</code>, or <code>dict.</code>) [Required]: This is the list of atom indices you want to add hydrogens to in the molecule of interest. This can be given as an <code>int</code> or a <code>list</code> of indices. If given as a <code>dict</code>, the key is the atom index you want to change, and the value is the charge of the atom you want to change the atoms to.</li> <li><code>number_of_methyls_to_add</code> (<code>int.</code>, or <code>list</code> of <code>int.</code>) [Optional]: These are the number of hydrogens you want to attached the atoms in the <code>atoms</code> variable to. Only give this if your <code>atoms</code> variable was an <code>int</code> or <code>list</code>. If only one element is given here, all the atoms in the <code>atoms</code> variable will be changed to this element.</li> </ul> Example of the add_hydrogens action. All these are valid.<pre><code>repair_crystals_instructions['CUMRUA'] = []\n\nrepair_crystals_instructions['CUMRUA'].append({'action': 'remove_atoms',  'molecule': 1, 'atoms': [131, 125, 119, 143, 129] + [135, 133, 137, 79] + [123, 127]})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'remove_atoms',  'molecule': 2, 'atoms': [138, 118, 116, 109, 126, 146] + [150, 134, 98, 123, 142] + [119, 114, 100, 112, 136, 129, 125], 'remove_attached_hydrogens': True})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'remove_atoms',  'molecule': 3, 'atoms': [119, 125, 98, 130, 113, 156, 152]+[85]+[143, 147, 140, 146, 150, 151, 159]+[132, 141, 136, 128], 'remove_attached_hydrogens': True})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'remove_atoms',  'molecule': 4, 'atoms': [132,121,127,130,157,154,160,150]+[81]+[112,102,105,93,79,100,118,136]+[163,124,119,116,145,144,146]+[140,107,82,70,92,64,80,95], 'remove_attached_hydrogens': True})\n\nrepair_crystals_instructions['CUMRUA'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': [130, 124, 118, 142, 128], 'number_of_hydrogens_to_add': [2, 2, 2, 2, 3]})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': [134, 132, 136, 78], 'number_of_hydrogens_to_add': 2})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'add_hydrogens', 'molecule': 1, 'atoms': [122, 126], 'number_of_hydrogens_to_add': 2})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'add_hydrogens', 'molecule': 2, 'atoms': [90, 92]+[93], 'number_of_hydrogens_to_add': [2, 3]+[3]})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'add_hydrogens', 'molecule': 3, 'atoms': {93: 3, 84: 2, 138: 2, 92: 2}})\nrepair_crystals_instructions['CUMRUA'].append({'action': 'add_hydrogens', 'molecule': 4, 'atoms': [111]+[75]+[91]+[45], 'number_of_hydrogens_to_add': [3]+[2]+[3]+[3]})\n</code></pre>"},{"location":"Using_The_ReCrystals_Program.html#output-from-the-recrystals-program","title":"Output from the ReCrystals Program","text":"<p>The ReCrystals program will create a folder called <code>repaired_crystal_database</code> and save the xyz files of the repaired crystals given in your <code>repair_crystals.py</code> script, based on the instructions you gave in this <code>repair_crystals.py</code>. </p> <ul> <li>Another folder called <code>repaired_crystal_database_molecules</code> will also be created. This will contain the <code>xyz</code> files of the individual molecules from your crystal files. This folder is purely created to allow you to check the repair molecules that make up your crystal, and make it easier to double-check that you have repaired the crystal as you desired. </li> </ul> <p>As well as the  <code>repaired_crystal_database</code> and <code>repaired_crystal_database_molecules</code> folders, the ReCrystals program will also create a file called <code>ReCrystals_logfile.log</code> that will record any warning messages produced while the ReCrystals program. </p>"},{"location":"Using_The_ReCrystals_Program.html#example-output-files-from-the-recrystals-program","title":"Example Output Files from the ReCrystals Program","text":"<p>Click here to find examples of crystals from the CCDC that have been repaired with the instructions from a <code>repair_crystals.py</code> file. </p>"}]}